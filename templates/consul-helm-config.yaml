global:
  domain: consul
  datacenter: lon1
  # see https://www.consul.io/docs/k8s/installation/deployment-configurations/consul-enterprise
  image: '${consul_image}'

  # Gossip encryption
  gossipEncryption:
%{ if role == "primary" ~}
    secretName: 'consul-gossip-encryption-key'
    secretKey: 'key'
%{ else ~}
      secretName: hashicorp-consul-federation
    secretKey: gossipEncryptionKey
%{ endif ~}
  tls:
    enabled: true
%{ if role == "primary" ~}
    enableAutoEncrypt: true
    serverAdditionalDNSSANs: []
%{ else ~}
    caCert:
      secretName: hashicorp-consul-federation
      secretKey: caCert
    caKey:
      secretName: hashicorp-consul-federation
      secretKey: caKey
%{ endif ~}

  enableConsulNamespaces: true
  acls:
    manageSystemACLs: true
%{ if role == "primary" ~}
    createReplicationToken: true
%{ else ~}
    replicationToken:
      secretName: hashicorp-consul-federation
      secretKey: replicationToken
%{ endif ~}
  federation:
    enabled: true
%{ if role == "primary" ~}
    createFederationSecret: true
%{ endif ~}
# Configure your Consul servers in this section.
server:
  replicas: 3
  bootstrapExpect: 3
  enterpriseLicense:
    secretName: 'consul-ent-license'
    secretKey: 'key'
%{ if role == "secondary" ~}
  extraVolumes:
    - type: secret
      name: hashicorp-consul-federation
      items:
        - key: serverConfigJSON
          path: config.json
      load: true
%{ endif ~}

SyncCatalog:
  enabled: true

# Configure Consul clients in this section
client:
  # Specify the resources that clients request for deployment.
  resources:
    requests:
      memory: "100Mi"
      cpu: "100m"
    limits:
      memory: "100Mi"
      cpu: "100m"

# Enable and configure the Consul UI.
ui:
  enabled: true
  service:
    type: LoadBalancer

# Configure security for Consul Connect pod injection
connectInject:
  enabled: true
  # default: true
  centralConfig:
    enabled: true

controller:
  enabled: true

ingressGateways:
  enabled: true
  gateways:
    - name: ingress-gateway
      service:
        type: LoadBalancer

meshGateway:
  enabled: true
  globalMode: local
  service:
    type: LoadBalancer

terminatingGateways:
  enabled: true
