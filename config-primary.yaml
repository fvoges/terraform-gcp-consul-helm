global:
  domain: consul
  datacenter: lon1
  # see https://www.consul.io/docs/k8s/installation/deployment-configurations/consul-enterprise
  image: 'hashicorp/consul-enterprise:1.9.1-ent'

  # Gossip encryption
  gossipEncryption:
    secretName: 'consul-gossip-encryption-key'
    secretKey: 'key'
  tls:
    enabled: true
    enableAutoEncrypt: true
    serverAdditionalDNSSANs: []
  enableConsulNamespaces: true
  acls:
    manageSystemACLs: true
    createReplicationToken: true
  federation:
    enabled: true
    createFederationSecret: true
# Configure your Consul servers in this section.
server:
  # storageClass: do-block-storage
  # Specify three servers that wait until all are healthy to bootstrap the Consul cluster.
  replicas: 3
  bootstrapExpect: 3
  # Specify the resources that servers request for placement. These values will serve a large environment.
  # resources:
  #   requests:
  #     memory: "100Mi"
  #     cpu: "100m"
  #   limits:
  #     memory: "100Mi"
  #     cpu: "100m"
  # If using Enterprise, reference the Kubernetes secret that holds your license here
  # see https://www.consul.io/docs/k8s/installation/deployment-configurations/consul-enterprise
  enterpriseLicense:
    secretName: 'consul-ent-license'
    secretKey: 'key'
  # Prevent Consul servers from co-location on Kubernetes nodes.
  # affinity: |
  #   podAntiAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       - labelSelector:
  #           matchLabels:
  #             app: {{ template "consul.name" . }}
  #             release: "{{ .Release.Name }}"
  #             component: terminating-gateway
  #         topologyKey: kubernetes.io/hostname

SyncCatalog:
  enabled: true

# Configure Consul clients in this section
client:
  # Specify the resources that clients request for deployment.
  resources:
    requests:
      memory: "100Mi"
      cpu: "100m"
    limits:
      memory: "100Mi"
      cpu: "100m"
# Enable and configure the Consul UI.
ui:
  enabled: true
  service:
    type: LoadBalancer
# Configure security for Consul Connect pod injection
connectInject:
  enabled: true
  # default: true
  centralConfig:
    enabled: true
controller:
  enabled: true
ingressGateways:
  enabled: true
  gateways:
    - name: ingress-gateway
      service:
        type: LoadBalancer
meshGateway:
  enabled: true
  globalMode: local
  # wanAddress:
  #   source: Static
  #   static: ${azurerm_public_ip.meshgateway_ip.ip_address}
  service:
    type: LoadBalancer
terminatingGateways:
  enabled: true
